parameters:
- name: SourcePipeline
  type: string
  default: ''
- name: ShouldPublish
  type: string
  default: true
- name: ShouldSign
  type: string
  default: true
- name: BuildToolsPath
  type: string
  default: '$(Build.SourcesDirectory)/azure-sdk-build-tools'
- name: NugetVersion
  type: string
  default: '5.4.x'
- name: PartnerDropsSubscription
  type: string
  default: 'azuresdkpartnerdrops-kv Secrets'
- name: PartnerDropsStorageName
  type: string
  default: 'azuresdkpartnerdrops'
- name: PartnerDropsContainerName
  type: string
  default: 'mgmt-netsdk-signed'
- name: PartnerDropsBlobDestPrefix
  type: string
  default: '$(System.DefinitionId)-$(Build.BuildId)-$(System.JobAttempt)'

jobs:
  - job: BuildPipelineArtifactToNuget
    pool:
      name: azsdk-pool-mms-win-2019-general
      vmImage: MMS2019

    steps:
      - checkout: self
      - checkout: azure-sdk-build-tools

      - download: '${{ parameters.SourcePipeline }}'
        artifact: packages
        patterns: '**/*nupkg'
        displayName: Download artifact from ${{ parameters.SourcePipeline }}

      - task: Powershell@2
        displayName: 'Verify Package Tags and Create Git Releases'
        inputs:
          filePath: ${{ parameters.BuildToolsPath }}/scripts/create-tags-and-git-release.ps1
          arguments: >
            -artifactLocation '$(PIPELINE.WORKSPACE)/${{ parameters.SourcePipeline }}/packages'
            -workingDirectory $(System.DefaultWorkingDirectory)
            -packageRepository 'Nuget'
            -releaseSha '$(resources.pipeline.${{ parameters.SourcePipeline }}.sourceCommit)'
            -repoOwner 'azure-sdk-for-net'
            -repoName 'Azure'
          pwsh: true
        env:
          GH_TOKEN: $(azuresdk-github-pat)
        condition: and(succeeded(), ne(variables['SkipCreateTagAndGitRelease'], 'true'))

      - ${{ if eq(parameters.ShouldSign, true) }}:
        - template: pipelines/steps/net-signing.yml@azure-sdk-build-tools
          parameters:
            PackagesPath: '$(PIPELINE.WORKSPACE)/${{ parameters.SourcePipeline }}/packages'
            BuildToolsPath: '${{ parameters.BuildToolsPath }}'

      - ${{ if eq(parameters.ShouldPublish, true) }}:
        - task: MSBuild@1
          displayName: 'Upload Symbols'
          inputs:
            solution: '${{ parameters.BuildToolsPath }}/tools/symboltool/SymbolUploader.proj'
            msbuildArguments: >
              /p:PackagesPath='$(PIPELINE.WORKSPACE)/${{ parameters.SourcePipeline }}/packages'
              /p:MSPublicSymbolsPAT=$(azuresdk-microsoftpublicsymbols-devops-pat)
              /p:MSSymbolsPAT=$(azuresdk-microsoft-devops-pat)
              /p:AzureSDKSymbolsPAT=$(azuresdk-azure-sdk-devops-pat)

        - task: NuGetToolInstaller@1
          displayName: 'Use NuGet ${{ parameters.NugetVersion }}'
          inputs:
            versionSpec: ${{ parameters.NugetVersion }}

        - task: NuGetCommand@2
          displayName: 'Publish to Nuget'
          inputs:
            command: push
            packagesToPush: '$(PIPELINE.WORKSPACE)/${{ parameters.SourcePipeline }}/packages/**/*.nupkg;!$(PIPELINE.WORKSPACE)/${{ parameters.SourcePipeline }}/packages/**/*.symbols.nupkg'
            nuGetFeedType: external
            publishFeedCredentials: Nuget.org

      - task: AzureFileCopy@2
        displayName: 'Copy Signed Files to Blob'
        inputs:
          SourcePath: '$(PIPELINE.WORKSPACE)/${{ parameters.SourcePipeline }}/packages'
          azureSubscription: '${{ parameters.PartnerDropsSubscription }}'
          Destination: AzureBlob
          storage: '${{ parameters.PartnerDropsStorageName }}'
          ContainerName: '${{ parameters.PartnerDropsContainerName }}'
          BlobPrefix: '${{ parameters.PartnerDropsBlobDestPrefix }}'
        condition: and(succeeded(), ne(variables['SkipCopySignedFilestoBlob'], 'true'))

      - powershell: |
          $link  = $(signedPackageLinkPrefix) + [System.Net.WebUtility]::UrlEncode($(signedPackageLinkSuffix))

          echo "Packages successfully uploaded to mgmt-netsdk-signed\${{ parameters.PartnerDropsBlobDestPrefix }} container download from:"
          echo "$link"
        displayName: 'Link to signed packages'
        condition: and(succeeded(), ne(variables['SkipLinkToSignedPackages'], 'true'))