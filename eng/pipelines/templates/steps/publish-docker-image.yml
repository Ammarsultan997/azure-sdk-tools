# Additional sample inputs can be found in `eng/containers/ci.yml`, but here is one here.
# default:
#   - name: test_proxy_linux
#     pool: 'ubuntu-20.04'
#     dockerRepo: 'engsys/testproxy-lin'
#     prepareScript: tools/test-proxy/docker/prepare.ps1
#     dockerFile: 'tools/test-proxy/docker/dockerfile'
#     stableTags:
#     - 'latest'
parameters:
    - name: DockerDeploymentConfig
      type: object
    - name: ImageTag
      type: string
    - name: ContainerRegistry
      type: string 
      default: 'azsdkengsys' 

steps:
    - ${{ if parameters.DockerDeploymentConfig.prepareScript }}:
        - pwsh: |
            ./${{ parameters.DockerDeploymentConfig.prepareScript }}
        displayName: "Run prep script"

    - task: Docker@2
        displayName: Build ${{ parameters.DockerDeploymentConfig.name }}:$(imageTag)
        inputs:
        command: build
        Dockerfile: ${{ parameters.DockerDeploymentConfig.dockerFile }}
        tags: $(imageTag)
        arguments: '-t $(containerRegistry).azurecr.io/${{ parameters.DockerDeploymentConfig.dockerRepo }}:$(imageTag)'

    - task: Docker@2
        displayName: Push ${{ parameters.DockerDeploymentConfig.name }}:$(imageTag)
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
        inputs:
        containerRegistry: $(containerRegistry)
        repository: ${{ parameters.DockerDeploymentConfig.dockerRepo }}
        command: push
        tags: $(imageTag)

    - ${{ each stableTag in parameters.DockerDeploymentConfig.stableTags }}:
        - task: Docker@2
        displayName: Build ${{ parameters.DockerDeploymentConfig.name }}:${{ stableTag }}
        inputs:
            command: build
            Dockerfile: ${{ parameters.DockerDeploymentConfig.dockerFile }}
            tags: ${{ stableTag }}
            arguments: '-t $(containerRegistry).azurecr.io/${{ parameters.DockerDeploymentConfig.dockerRepo }}:${{ stableTag }}'

        - task: Docker@2
        displayName: Push ${{ parameters.DockerDeploymentConfig.name }}:${{ stableTag }}
        condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

        inputs:
            containerRegistry: $(containerRegistry)
            repository: ${{ parameters.DockerDeploymentConfig.dockerRepo }}
            command: push
            tags: ${{ stableTag }}